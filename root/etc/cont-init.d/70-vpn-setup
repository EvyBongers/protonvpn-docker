#!/usr/bin/with-contenv bash
# shellcheck shell=bash
set -eo pipefail

export LOG_FMT="full"
if [[ $DEBUG == "1" ]]; then
  export LOG_LVL=0
fi

if [[ -f /usr/local/lib/loggers/logger.sh ]]; then
  # shellcheck disable=SC1091
  source /usr/local/lib/loggers/logger.sh
else
  echo "[ERROR ] Failed to loag logging library at/usr/local/lib/loggers/logger.sh"
  exit 1
fi

if [[ -z "$PROTONVPN_USERNAME" ]]; then
  log_error "No Username specified!"
  exit 2
fi

if [[ -z "$PROTONVPN_PASSWORD" ]]; then
  log_error "No Password specified!"
  exit 3
fi

if [[ -z ${PROTONVPN_CHECK_URL} ]]; then
  log_error "Healthcheck endpoint not defined!"
  exit 3
fi

if [[ ${PROTONVPN_CHECK_URL} =~ ^https://* ]]; then
    log_success "OK! Check URL is secure"
else
    log_error "PROTONVPN_CHECK_URL must be secure(https)"
    exit 3
fi
# Validate healthcheck endpoint returns 200
if [[ $(curl -s -o /dev/null -w "%{http_code}" "${PROTONVPN_CHECK_URL}") == "200" ]]; then
  log_success "Healthcheck endpoint returned 200"
else
  log_error "Your PROTONVPN_CHECK_URL: ${PROTONVPN_CHECK_URL} is invalid or is not responding with 200"
  exit 3
fi

# Validate healthcheck query returns non empty
init_check_resp="$(curl -s "${PROTONVPN_CHECK_URL}" | jq -r "${PROTONVPN_CHECK_QUERY}")"
if [[ $init_check_resp =~ ^[a-zA-Z]{2}$ ]]; then
  log_success "Healthcheck endpoint query returned: ${init_check_resp}"
else
  log_error "Your PROTONVPN_CHECK_URL or PROTONVPN_CHECK_QUERY is invalid (${init_check_resp})"
  exit 3
fi

case ${PROTONVPN_TIER} in
  0 | free | Free | FREE)                log_notice "Free Plan";CFG_TIER=0;;
  1 | basic | Basic | BASIC)             log_notice "Basic Plan";CFG_TIER=1;;
  2 | plus | Plus | PLUS)                log_notice "Plus Plan";CFG_TIER=2;;
  3 | visionary | Visionary | VISIONARY) log_notice "Visionary Plan";CFG_TIER=3;;
  *)                                     log_error "Invalid ProtonVPN Tier, Can only accept 0-3";exit 3;;
esac

case ${PROTONVPN_PROTOCOL} in
  tcp | TCP)                    log_notice "Protocol: TCP";CFG_PROTO="tcp";;
  udp | UDP)                    log_notice "Protocol: UDP";CFG_PROTO="udp";;
  *)                            log_warning "Protocol: Invalid protocol specified - ${PROTONVPN_PROTOCOL}";
                                log_warning "Falling back to UDP";
                                CFG_PROTO="udp";;
esac

log_variable "PROTONVPN_SERVER"

if [[ -z ${PROTONVPN_SERVER} ]]; then
  log_error "Specify PROTONVPN_SERVER(${PROTONVPN_SERVER})"
  exit 4
fi

if [[ ${PROTONVPN_SERVER^^} =~ ^[A-Z]{2}$ ]]; then
  log_notice "Using fastest server from COUNTRY: ${PROTONVPN_COUNTRY^^}"
elif [[ ${PROTONVPN_SERVER} == "RANDOM" ]]; then
  log_notice "Using a RANDOM server"
elif [[ ${PROTONVPN_SERVER} == "P2P" ]]; then
  if [[ ${CFG_TIER} -lt 1 ]]; then
    log_error "Using P2P requires basic plan or above!"
    exit 4
  else
    log_notice "Using fastest available P2P server"
  fi
else
  log_notice "Connecting to server: ${PROTONVPN_SERVER}"
fi

IP_ADD_REGEX='([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
SUBNET_REGEX='([0-9]|[12][0-9]|3[012])'

# shellcheck disable=SC2206
cidrs_from_env=(${PROTONVPN_EXCLUDE_CIDRS//,/ })

declare -g -a SPLIT_TUNNEL_CIDRS INVALID_CIDRS

# Split Tunnels
if [[ ${#cidrs_from_env[@]} -gt 0 ]]; then
  log_info "Validating CIDRs"
  for cidr in "${cidrs_from_env[@]}"; do
    if [[ $cidr =~ ^$IP_ADD_REGEX(\.$IP_ADD_REGEX){3}/$SUBNET_REGEX$ ]]; then
      log_info "CIDR $cidr is valid"
      SPLIT_TUNNEL_CIDRS+=("$cidr")
    else
      log_error "CIDR $cidr is INVALID"
      INVALID_CIDRS+=("$cidr")
    fi
  done
else
  log_debug "Split tunnel is disabled!(${cidrs_from_env[*]})"
fi

if [[ ${#INVALID_CIDRS[@]} -gt 0 ]];then
  log_error "Following CIDRs were invalid: ${INVALID_CIDRS[*]}"
  exit 5
fi

# Setup DNS leak protection
if [[ ${PROTONVPN_DNS_LEAK_PROTECT} -eq 0 ]]; then
  log_notice "Disabling DNS leak protection!!"
  DNS_LEAK_PROTECTION=0
else
  log_info "Enabling DNS leak protection."
  DNS_LEAK_PROTECTION=1
fi

# Handle Split Tunnels
if [[ ${#SPLIT_TUNNEL_CIDRS[@]} -gt 0 ]];then
  log_notice "Following CIDRs will be excluded from VPN ${SPLIT_TUNNEL_CIDRS[*]}"
  ENABLE_SPLIT_TUNNEL=1
else
  log_notice "Split tunneing is disabled"
  log_warning "If your app container is running as as server, you may not be able to connect to it from external hosts!"
  ENABLE_SPLIT_TUNNEL=0
fi

log_info "Creating folders"
mkdir -p /root/.pvpn-cli/

# permissions
log_info "Set file permissions"
chown root:root /root/.pvpn-cli/

# Pull Server Info
log_info "Prefetch server list"
curl --fail \
    --location \
    --silent \
    --show-error \
    --max-time 20 \
    --silent \
    --location \
    --user-agent 'protonvpn-cli-docker' \
    --header 'x-pm-appversion: LinuxVPN_2.2.6' \
    --header 'x-pm-apiversion: 3' \
    --header 'Accept: application/vnd.protonmail.v1+json' \
    --output /root/.pvpn-cli/serverinfo.json \
    https://api.protonvpn.ch/vpn/logicals

__METADATA_PULL_DATE="$(date +%s)"

log_info "Generating config file"
cat > /root/.pvpn-cli/pvpn-cli.cfg <<EOF
[USER]
# API endpoint
api_domain = https://api.protonvpn.ch
username = ${PROTONVPN_USERNAME}
# Proton VPN Plan ${PROTONVPN_TIER:-NA}
tier = ${CFG_TIER}
default_protocol = ${CFG_PROTO}
# Indicates that protonvpn init has been successful
initialized = 1
dns_leak_protection = ${DNS_LEAK_PROTECTION}
custom_dns = None
check_update_interval = 3
killswitch = 0
split_tunnel = ${ENABLE_SPLIT_TUNNEL}

[metadata]
last_api_pull = ${__METADATA_PULL_DATE}
last_update_check = 0
EOF

if [[ ${ENABLE_SPLIT_TUNNEL} -eq 1 ]];then
  log_info "Generate split-tunnel config file"
  printf "%s\n" "${SPLIT_TUNNEL_CIDRS[@]}" > /root/.pvpn-cli/split_tunnel.txt
fi

log_info "Writing credentials file"
# https://github.com/ProtonVPN/linux-cli/blob/089af8d309cf774adc31c158a62a27733ae39ee0/protonvpn_cli/utils.py#L530
cat > /root/.pvpn-cli/pvpnpass <<EOF
${PROTONVPN_USERNAME}+plc
${PROTONVPN_PASSWORD}
EOF

log_info "Restrict credentials file"
chmod 600 /root/.pvpn-cli/pvpn-cli.cfg
